import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '../store'; // Assuming store is one level up

// Define a type for the user state slice
interface UserState {
  isAuthenticated: boolean;
  userData: { // Replace with your actual user data structure
    id: string | null;
    name: string | null;
    email: string | null;
    // Add other relevant user fields: roles, preferences, etc.
  } | null;
  status: 'idle' | 'loading' | 'failed';
}

// Define the initial state using that type
const initialState: UserState = {
  isAuthenticated: false,
  userData: null,
  status: 'idle',
};

export const userSlice = createSlice({
  name: 'user',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    // Action to set user data on successful login/authentication
    setUser: (state, action: PayloadAction<UserState['userData']>) => {
      state.isAuthenticated = !!action.payload;
      state.userData = action.payload;
      state.status = 'idle';
    },
    // Action to clear user data on logout
    clearUser: (state) => {
      state.isAuthenticated = false;
      state.userData = null;
      state.status = 'idle';
    },
    // Example async action status handling (can be used with createAsyncThunk)
    setUserLoading: (state) => {
      state.status = 'loading';
    },
    setUserFailed: (state) => {
      state.status = 'failed';
    },
  },
  // Optional: Add extraReducers for handling actions defined elsewhere,
  // e.g., actions generated by createAsyncThunk
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(fetchUserById.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(fetchUserById.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.userData = action.payload;
  //       state.isAuthenticated = true;
  //     })
  //     .addCase(fetchUserById.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

// Export the actions generated by createSlice
export const { setUser, clearUser, setUserLoading, setUserFailed } = userSlice.actions;

// Selectors allow us to efficiently retrieve parts of the state
export const selectUser = (state: RootState) => state.user.userData;
export const selectIsAuthenticated = (state: RootState) => state.user.isAuthenticated;
export const selectUserStatus = (state: RootState) => state.user.status;

// Export the reducer function itself
export default userSlice.reducer; 