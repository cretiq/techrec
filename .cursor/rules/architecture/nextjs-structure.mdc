---
description:
globs:
alwaysApply: false
---
# Next.js Project Structure

This document outlines the project structure and organization for our Next.js 15.2 application using the App Router.

## Project Layout

```
techrec/
├── app/                    # App Router - All routes, pages, layouts, and API routes
├── components/             # Reusable React components
├── lib/                    # Core business logic and utilities
├── hooks/                  # Custom React hooks
├── types/                  # TypeScript type definitions
├── styles/                 # Global styles and CSS modules
├── prisma/                 # Database schema and migrations
├── public/                 # Static assets
├── utils/                  # General utility functions
├── scripts/                # Build and development scripts
├── tasks/                  # Task management files
└── [config files]          # Configuration files in root

```

## Core Directories

### `app/` Directory (App Router)
The heart of the Next.js application containing all routes and pages.

```
app/
├── (auth)/                 # Route group for auth pages
│   ├── login/
│   └── signup/
├── api/                    # API route handlers
│   ├── auth/
│   │   └── [...nextauth]/
│   ├── cv/
│   └── users/
├── developer/              # Developer portal routes
│   ├── dashboard/
│   ├── profile/
│   └── cv-management/
├── company/                # Company portal routes
├── layout.tsx              # Root layout
├── page.tsx                # Home page
├── loading.tsx             # Global loading UI
├── error.tsx               # Global error UI
└── not-found.tsx           # 404 page
```

#### App Router Conventions
- `page.tsx` - Defines a route page
- `layout.tsx` - Shared UI for a segment and its children
- `loading.tsx` - Loading UI for a segment
- `error.tsx` - Error UI for a segment
- `template.tsx` - Re-rendered layout
- `route.ts` - API endpoint handler
- `(folder)` - Route group without affecting URL
- `[folder]` - Dynamic route segment
- `[...folder]` - Catch-all route segment
- `[[...folder]]` - Optional catch-all route

### `components/` Directory
Houses all reusable React components organized by feature or type.

```
components/
├── ui/                     # Base UI components (buttons, inputs, etc.)
├── ui-daisy/               # DaisyUI component implementations
├── analysis/               # CV analysis related components
│   └── display/
├── cv/                     # CV management components
├── profile/                # User profile components
├── analytics/              # Analytics and charts
│   └── charts/
└── page/                   # Page-specific components
```

### `lib/` Directory
Contains core business logic, configurations, and integrations.

```
lib/
├── features/               # Redux slices and state management
├── generation/             # AI generation utilities
├── migration/              # Database migration utilities
├── queues/                 # Background job queues
├── validations/            # Zod schemas and validators
├── workers/                # Background worker processes
├── prisma.ts               # Prisma client instance
├── redis.ts                # Redis client configuration
└── utils.ts                # Core utility functions
```

### `hooks/` Directory
Custom React hooks for encapsulating reusable logic.

```
hooks/
├── useAuth.ts              # Authentication hook
├── useDebounce.ts          # Debouncing hook
├── useLocalStorage.ts      # Local storage hook
└── useMediaQuery.ts        # Responsive design hook
```

### `types/` Directory
Centralized TypeScript type definitions and interfaces.

```
types/
├── index.ts                # Main type exports
├── api.ts                  # API request/response types
├── database.ts             # Database model types
└── ui.ts                   # UI component prop types
```

## Configuration Files

### Root Configuration
- `next.config.mjs` - Next.js configuration
- `tsconfig.json` - TypeScript configuration
- `tailwind.config.ts` - Tailwind CSS configuration
- `postcss.config.mjs` - PostCSS configuration
- `eslint.config.mjs` - ESLint rules
- `jest.config.ts` - Jest testing configuration
- `package.json` - Dependencies and scripts
- `middleware.ts` - Next.js middleware

### Environment Files
- `.env` - Default environment variables
- `.env.local` - Local environment overrides (git-ignored)
- `.env.production` - Production environment variables
- `.env.example` - Example environment template

## File Naming Conventions

### Components
- React Components: `PascalCase.tsx` (e.g., `UserProfile.tsx`)
- Component folders: `PascalCase/` with `index.tsx`
- Component tests: `ComponentName.test.tsx`

### Utilities & Hooks
- Utility files: `kebab-case.ts` (e.g., `format-date.ts`)
- Hook files: `useHookName.ts` (e.g., `useAuth.ts`)

### API Routes
- Route handlers: `route.ts` in appropriate directory
- Dynamic routes: `[param]/route.ts`

## Import Path Aliases

Configured in `tsconfig.json`:
```json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
```

Usage:
```typescript
import { Button } from '@/components/ui/button';
import { prisma } from '@/lib/prisma';
import type { User } from '@/types';
```

## Static Assets

### `public/` Directory
```
public/
├── images/                 # Image assets
├── fonts/                  # Custom fonts
├── icons/                  # Icon files
├── favicon.ico             # Favicon
└── robots.txt              # SEO robots file
```

## Build Output

### `.next/` Directory (git-ignored)
```
.next/
├── cache/                  # Build cache
├── server/                 # Server build output
├── static/                 # Static file output
└── types/                  # Generated types
```

## Best Practices

### 1. Route Organization
- Group related routes using route groups `(groupName)`
- Keep route files focused on routing logic
- Extract complex logic to `lib/` or `utils/`

### 2. Component Organization
- Colocate component files with their styles and tests
- Use index files for cleaner imports
- Separate presentational and container components

### 3. API Route Structure
- Keep route handlers thin
- Delegate business logic to service functions in `lib/`
- Use consistent error handling patterns

### 4. Type Safety
- Define types in `types/` directory
- Use type imports: `import type { User } from '@/types'`
- Avoid `any` types

### 5. Configuration Management
- Use environment variables for all configuration
- Never commit sensitive data
- Provide `.env.example` for setup reference

## Module Boundaries

### Clear Separation of Concerns
1. **Presentation Layer** (`app/`, `components/`)
   - React components and pages
   - UI logic and state management

2. **Business Logic Layer** (`lib/`)
   - Core application logic
   - Data processing and transformations
   - External service integrations

3. **Data Layer** (`prisma/`, `lib/prisma.ts`)
   - Database schema and migrations
   - Data access patterns

4. **Infrastructure Layer** (`lib/redis.ts`, `lib/queues/`)
   - Caching mechanisms
   - Background job processing
   - External service clients

## Related Documentation

- [Coding Standards](mdc:.cursor/rules/core/coding-standards.mdc) - General coding conventions
- [API Conventions](mdc:.cursor/rules/backend/api-conventions.mdc) - API route guidelines
- [Component Architecture](mdc:.cursor/rules/frontend/component-architecture.mdc) - Component design patterns
