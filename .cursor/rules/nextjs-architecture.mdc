---
description: 
globs: 
alwaysApply: true
---
# Next.js/TypeScript Architecture, Structure & Conventions

This document outlines the core technical standards, architectural best practices, specific folder structure, and file placement conventions used in this Next.js project. Adhering to this guide ensures consistency, scalability, and maintainability.

## 1. Code Organization & Structure

This project uses the **Next.js App Router** conventions directly within the root `app/` directory (i.e., no `src/` prefix).

### 1.1. Root Directory Layout

*   **App Router Core:** The `app/` directory contains all routing, pages, layouts, etc.
*   **Configuration:** Key configuration files (`next.config.mjs`, `tsconfig.json`, `tailwind.config.ts`, `postcss.config.mjs`, `eslint.config.mjs`, `jest.config.ts`, `package.json`, `middleware.ts`) are located in the project root.

### 1.2. Core Folder Breakdown

*   **`app/`**:
    *   **Purpose:** Contains all routes, pages, layouts, loading/error UIs, and API route handlers as defined by the Next.js App Router.
    *   **Contents:** Server Components, Client Components (`"use client"`), `page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx`, `template.tsx`, `route.ts` (for APIs, typically within `app/api/`), route groups `(groupName)`.
*   **`components/`**:
    *   **Purpose:** Houses reusable React components used across the application.
    *   **Contents:** UI primitives, composite components, feature-specific components. Subfolders like `ui/`, `shared/`, or feature-specific folders may exist within.
*   **`lib/`**:
    *   **Purpose:** Contains shared utility functions, helper classes, core business logic, constants, and potentially third-party library configurations or wrappers (e.g., Prisma client initialization `lib/prisma.ts`).
    *   **Contents:** Utility functions (`utils.ts`), constants (`constants.ts`), client configurations, potentially data fetching logic decoupled from components.
*   **`hooks/`**:
    *   **Purpose:** Stores custom React hooks used for encapsulating reusable stateful logic or side effects.
    *   **Contents:** Files named like `useMyHook.ts`.
*   **`types/`**:
    *   **Purpose:** Centralized location for shared TypeScript type definitions and interfaces.
    *   **Contents:** `*.ts` files defining interfaces (`interface`), types (`type`), and enums (`enum`). Example: `index.ts` or domain-specific type files.
*   **`styles/`**:
    *   **Purpose:** Holds global CSS styles, base styles, or theme definitions.
    *   **Contents:** `globals.css` (includes base Tailwind directives).
*   **`prisma/`**:
    *   **Purpose:** Contains all Prisma-related files.
    *   **Contents:** `schema.prisma` (database schema definition), potentially migrations (`migrations/`) and the generated client code.
*   **`public/`**:
    *   **Purpose:** Stores static assets that are served directly by the web server.
    *   **Contents:** Images, fonts, `favicon.ico`, `robots.txt`, etc.
*   **`utils/`**:
    *   **Purpose:** General-purpose utility functions that might not fit neatly into `lib/` or are simpler helpers. Consider consolidating into `lib/` if overlap occurs.
    *   **Contents:** Small, standalone helper functions.
*   **`scripts/`**:
    *   **Purpose:** Contains helper scripts for development, build processes, or automation.
    *   **Contents:** `.sh` or `.js`/`.ts` scripts (e.g., `seed-db.ts`).
*   **`tasks/`**:
    *   **Purpose:** Contains generated task files or configuration related to the Task Master tool (`README-task-master.md`).
    *   **Contents:** Task definition files (e.g., `.md` or `.json`).

### 1.3. Routing Conventions

*   Utilize Next.js file-based routing within `app/` (e.g., `app/dashboard/page.tsx`).
*   Use route grouping (`app/(marketing)/about/page.tsx`) for organization without affecting URL paths.

## 2. TypeScript Implementation

*   **Strict Type Safety:** Use TypeScript rigorously. Define explicit types for props, state, function arguments, and return values. Avoid `any` unless absolutely necessary and clearly justified.
*   **Centralized Types:** Shared types and interfaces are primarily located in the `types/` directory.
*   **Interfaces & Types:** Use `interface` for object shapes (e.g., API responses, component props) and `type` for unions, intersections, or utility types.
*   **Utility Types:** Leverage built-in TypeScript utility types (e.g., `Partial`, `Required`, `Readonly`, `Pick`, `Omit`) to create specific types efficiently.

## 3. Rendering Strategies

*   **Choose Appropriately:** Select the optimal rendering strategy (SSR, SSG, ISR, CSR) per page/component based on data freshness, SEO, and performance needs. **Default to Server Components.**
*   **Server Components (Default):** Use for data fetching (especially DB access via Prisma client from `lib/`), logic not requiring browser APIs or interactivity. Keep them lean. Reside within `app/`.
*   **Client Components (`"use client"`):** Use for interactivity, lifecycle effects (`useEffect`), browser APIs, and state management hooks (`useState`, `useContext`, `useReducer`). Place within relevant `app/` route folders or reusable ones in `components/`.

## 4. Component Design

*   **Reusability:** Design small, focused components with a single responsibility, primarily located in `components/`.
*   **Props:** Define clear and typed props interfaces (often in `types/` or colocated). Use destructuring for props.
*   **Composition:** Favor composition over inheritance. Build complex UIs by combining smaller components.
*   **Separation:** Separate data fetching logic (Server Components, functions in `lib/`) from presentation components (Client or Server Components in `components/` or `app/`).

## 5. State Management

*   **Local State:** Use `useState` and `useReducer` for component-level state.
*   **Shared State (Client):**
    *   **Redux Toolkit (Primary):** Used as the main state management solution with Redux Persist for persisted state. Existing slices:
        - `uiSlice.ts`: UI-related state
        - `analyticsSlice.ts`: Analytics data
        - `userSlice.ts`: User-related state
        - `analysisSlice.ts`: Analysis-related state
    *   **Context API:** Only for simple, low-frequency updates (e.g., theme).
    *   **Redux Persist Configuration:** When using Redux with persistence:
        * Configure persistence per reducer using `redux-persist`
        * Use `whitelist` to explicitly specify which state fields to persist
        * Common persistence candidates:
          - User authentication state
          - User preferences
          - Form data that needs to survive refreshes
          - Cached API responses
        * Avoid persisting:
          - Sensitive information
          - Large datasets that can be easily refetched
          - Temporary UI states
        * Always configure serializable checks in middleware to ignore Redux-persist actions:
          ```typescript
          middleware: (getDefaultMiddleware) =>
            getDefaultMiddleware({
              serializableCheck: {
                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
              },
            })
          ```
*   **Server State:** Utilize libraries like **React Query (`@tanstack/react-query`) or SWR** for caching, synchronization, and management of server-fetched data (e.g., data fetched via Prisma in Route Handlers).
*   **Rule: Ensure State Management Consistency:** When data is shared between components (e.g., parent fetching data, child displaying/editing), ensure a **single source of truth**. Either pass data down via props *or* manage it centrally in a global store (like Redux/Zustand). **Avoid mixing approaches** where a parent manages data locally while the child attempts to read the same conceptual data directly from a global store, as this leads to synchronization issues and potential bugs like stale data or infinite loops. Refer to Section 5.1 for related `useEffect` dependency considerations when fetching and updating shared state.

### 5.1. `useEffect` Hook Dependencies

**Careful dependency management in `useEffect` is crucial to prevent infinite loops, especially when fetching data or synchronizing state.**

*   **Rule:** The dependency array should accurately reflect all *external* values (props, context, state from other hooks like `useSearchParams`) that the effect relies on.
*   **Rule:** **Critically, avoid including state variables or state setters in the dependency array if those same state variables are updated *within* the effect in a way that would cause the effect to re-run.** This is a common source of infinite loops.
*   **Rule:** When fetching data based on props or URL params, the effect should typically only depend on those props/params, not the state *derived* from the fetched data.
*   **Rule:** Use the `eslint-plugin-react-hooks` (specifically `exhaustive-deps`) to help identify missing dependencies, but critically evaluate its suggestions, especially when state setters are involved. Sometimes, disabling the rule for a line with a clear explanation is necessary if including a dependency *would* cause a loop (e.g., a state setter function that is guaranteed stable).
*   **Rule:** Use cleanup functions within `useEffect` to cancel fetches or subscriptions when the component unmounts or dependencies change before the asynchronous operation completes.

```typescript
// ❌ DON'T: Include state updated inside the effect in dependencies
const [data, setData] = useState(null);
const { id } = props; 

useEffect(() => {
  // Setting state inside that is also a dependency potentially causes issues
  setData(null); // Clearing state might re-trigger if data is a dependency
  fetch(`/api/data/${id}`)
    .then(res => res.json())
    .then(fetchedData => {
      setData(fetchedData); // Setting state again
    });
// Adding 'data' here would cause a loop because setData is called inside.
// The linter might suggest adding 'data', but it should be avoided here.
}, [id]); // Problem: If 'data' were added, it creates a loop.

// ✅ DO: Only include external dependencies that trigger the fetch. Handle async correctly.
const [data, setData] = useState(null);
const { id } = props; // Or get from useParams, useSearchParams

useEffect(() => {
  let isActive = true; // Flag to check if component is still mounted
  console.log(`Fetching data for ID: ${id}`);
  setData(null); // Clear previous data if needed when ID changes

  fetch(`/api/data/${id}`)
    .then(res => res.json())
    .then(fetchedData => {
      if (isActive) { // Only update state if the effect hasn't been cleaned up
        setData(fetchedData);
      }
    })
    .catch(error => {
      console.error("Fetch error:", error);
      if (isActive) {
        setData(null); // Or set an error state
      }
    });

  // Cleanup function
  return () => {
    isActive = false;
    console.log(`Cleaning up effect for ID: ${id}`);
  };
}, [id]); // Only depend on the external 'id' prop/param triggering the fetch
```

*   **Rule:** When synchronizing component state with URL parameters (e.g., from `useSearchParams`), separate the effect responsible for reading the URL and triggering data fetches/state updates from effects that *write* updates back to the URL. Use minimal, distinct dependency arrays for each concern.
*   **Rule: Avoid Redux State Dependencies Updated by Thunks in `useEffect`:** Be particularly cautious when a `useEffect` hook dispatches a Redux thunk (e.g., for data fetching) and also includes Redux state variables updated by that same thunk (like `status` or the fetched data itself) in its dependency array. This often leads to infinite loops or prevents the component from re-rendering with the final state. **Prefer removing the Redux state variables from the dependency array.** Read their current values directly within the effect's logic if needed, relying only on external triggers (like URL parameters or props) in the dependency array.

```typescript
// ... existing code example for URL sync ...
```

## 6. Styling

*   **Primary Method: Tailwind CSS:** This project primarily uses **Tailwind CSS** for styling, configured via `tailwind.config.ts` in the root. Leverage utility classes for consistency and rapid development.
*   **Tailwind Configuration (`tailwind.config.ts`):** Ensure the `content` array accurately reflects the project structure defined in Section 1. It should typically include paths like `./app/**/*.{js,ts,jsx,tsx,mdx}`, `./components/**/*.{js,ts,jsx,tsx,mdx}`, etc. **Crucially, avoid adding `./src/**/*.{js,ts,jsx,tsx,mdx}` to the `content` array, as this project does not use a top-level `src/` directory.**
*   **Global Styles:** Global styles and base Tailwind directives are defined in `styles/globals.css`.
*   **CSS Modules/CSS-in-JS:** Avoid introducing other styling methods unless there's a strong, specific reason. Maintain consistency with Tailwind.

## 7. Performance Optimization

*   **Next.js Optimizations:** Utilize built-in components: `next/image` (for images), `next/font` (for fonts), `next/script` (for third-party scripts).
*   **Code Splitting:** Leverage dynamic imports (`next/dynamic`) for lazy loading heavy components or libraries not needed on initial load.
*   **Bundle Analysis:** Periodically use `@next/bundle-analyzer` to inspect bundle sizes and identify optimization opportunities.
*   **Memoization:** Use `React.memo`, `useMemo`, `useCallback` judiciously to prevent unnecessary re-renders, especially for expensive computations or components passed down through multiple layers. Focus on measurable performance gains.

## 8. API Routes & Data Fetching

*   **Route Handlers:** Use **Route Handlers** (`route.ts`) within the `app/api/` directory (or subdirectories) for creating API endpoints.
*   **Rule: Handle Dynamic Route Parameters Carefully:** When accessing dynamic route parameters (e.g., `params.id`) within Route Handlers, ensure an `await` for a necessary asynchronous operation (like `getServerSession` or database access) occurs *before* accessing `params`. Alternatively, parse the dynamic segments directly from `request.url` after an initial `await` to avoid potential runtime errors (`Route "..." used params.id. params should be awaited...`).

```typescript
// Example: Handling params safely
export async function GET(request: Request, { params }: { params: Params }) {
  let analysisId: string | undefined;
  try {
    // Option 1: Await something else first
    const session = await getServerSession(authOptions);
    analysisId = params.id; // Access after await
    // ... rest of logic ...

    // Option 2: Parse from URL
    const url = new URL(request.url);
    const segments = url.pathname.split('/');
    analysisId = segments[segments.length - 1];
    // ... rest of logic ...

  } catch (error) {
    // ... error handling ...
  }
}
```

*   **Separation of Concerns:** Keep Route Handlers focused on request/response handling (parsing request, validating, sending response). Delegate complex business logic or database interactions to functions within `lib/` (e.g., `lib/services/`, `lib/queries/`).
*   **Database Access:** Use the **Prisma Client** (typically initialized in `lib/prisma.ts` or similar) for database interactions within API routes or Server Components.
*   **Error Handling:** Implement robust error handling in API routes using try/catch blocks, appropriate HTTP status codes (e.g., 400, 401, 404, 500), and consistent JSON error response formats.
*   **Validation:** Use libraries like **Zod** for validating request bodies, query parameters, and API responses. Define schemas (potentially in `lib/validations/` or colocated).
*   **Middleware:** Utilize Next.js **Middleware** (`middleware.ts` in the root) for cross-cutting concerns like authentication checks, request logging, or redirects before requests reach Route Handlers or pages.

## 9. Code Quality & Conventions

*   **Linting & Formatting:** Enforce code style using **ESLint** (`eslint.config.mjs`) and **Prettier** (via editor integration or scripts). Ensure configurations are checked into Git.
*   **Naming Conventions:** Follow consistent naming conventions:
    *   `PascalCase` for components, types, interfaces, enums.
    *   `camelCase` for variables, functions, hooks.
    *   `kebab-case` for file names (optional, but often used for components/routes).
*   **Modularity:** Write modular, reusable, and testable functions and components.
*   **`useEffect` Dependencies:** Pay close attention to `useEffect` dependency arrays to prevent infinite loops, especially during data fetching or state synchronization. Refer to the detailed guidance in Section 5.1.

## 10. Testing

*   **Unit Tests:** Use **Jest** (`jest.config.ts`) and **React Testing Library (`@testing-library/react`)** to test individual components (especially UI logic in Client Components in `components/` or `app/`) and utility functions (`lib/`, `utils/`). Focus on testing behavior from the user's perspective.
*   **Integration Tests:** Test interactions between multiple components or API routes and database logic. Jest + RTL or potentially Playwright/Cypress can be used.
*   **End-to-End (E2E) Tests:** Use frameworks like **Cypress** or **Playwright** to test critical user flows across the entire application.
*   **API Route Testing:** Test API routes (`app/api/**/route.ts`) by mocking requests (`fetch` or libraries like `supertest`) and validating responses and potential side effects (e.g., database changes).

## 11. Deployment & Hosting

*   **Optimized Platforms:** Prefer platforms optimized for Next.js (e.g., **Vercel**, Netlify, AWS Amplify).
*   **Environment Variables:** Use environment variables (`.env*.local`, `.env.production`) for configuration (API keys, `DATABASE_URL` for Prisma). Prefix variables exposed to the browser with `NEXT_PUBLIC_`. **Never commit sensitive `.env` files.**
*   **Database:** Ensure the production database (e.g., PostgreSQL, MySQL managed service) is configured correctly via the `DATABASE_URL` environment variable.
*   **Caching:** Leverage platform caching (CDN, ISR) and Next.js data caching strategies effectively.

## 12. Data Consistency & Normalization (New Section)

*   **Rule: Ensure API Response Structure Consistency:** Be mindful that API responses, especially when influenced by caching layers, might have different structures (e.g., cached data might omit wrapper objects or metadata present in direct DB responses).
*   **Rule: Normalize Data Early:** Frontend data fetching logic (e.g., Redux thunks, React Query fetch functions) should anticipate potential structural differences in API responses. **Normalize the data structure as early as possible**, ideally within the fetching function/thunk itself, before passing it to reducers or state setters. This ensures that subsequent logic (reducers, components) always operates on a consistent and predictable data format.

```typescript
// Example: Normalizing data in a Redux Thunk
export const fetchAnalysisById = createAsyncThunk(
  'analysis/fetchById',
  async (analysisId: string, { rejectWithValue }) => {
    try {
      const response = await fetch(`/api/cv-analysis/${analysisId}`);
      // ... error handling ...
      const rawData = await response.json();
      
      // Normalize: Ensure payload always has { id, analysisResult }
      // Handles cases where API might return only analysisResult (e.g., from cache)
      const normalizedPayload = {
        id: rawData.id ?? analysisId, // Use ID from data if present, else use known ID
        analysisResult: (rawData.analysisResult ?? rawData) as CvAnalysisData // Use nested result if present, else assume rawData is the result
      };

      // Type check analysisResult before returning
      if (typeof normalizedPayload.analysisResult !== 'object' || normalizedPayload.analysisResult === null) {
          throw new Error('Normalized analysisResult is not a valid object');
      }

      return normalizedPayload; 
    } catch (error: any) {
      // ... error handling ...
    }
  }
);
```

## 13. Background Jobs (New Section)

*   **Consideration:** For long-running tasks initiated by API requests (like complex analysis or external API calls), consider offloading the work to a background job queue (e.g., BullMQ with Redis, Quirrel, Vercel Serverless Functions with longer timeouts) instead of processing synchronously within the API route handler.
*   **Benefits:** Improves API response time, enhances reliability (retries), allows for scaling workers independently.
*   **Implementation:** 
    - API route enqueues the job with necessary parameters (e.g., `cvId`).
    - A separate worker process dequeues jobs, executes the logic (parsing, analysis, DB updates), and handles completion/failure status updates.
    - Frontend polls for status updates or uses real-time updates (e.g., WebSockets) if needed.
*   **Standard:** **Redis is used in this project** and can be leveraged for building a queuing system if needed. Evaluate the best implementation approach (e.g., basic Redis lists, dedicated Redis queue library, Vercel Functions) based on complexity.

## 14. Redis Client (`lib/redis.ts`)

*   **Centralized Initialization:** The project uses a centralized Redis client initialized in `lib/redis.ts`. This module manages a singleton `ioredis` client instance.
*   **Configuration:** Connection is configured via environment variables:
    *   `REDIS_URL` (e.g., `redis://:[password]@[host]:[port]`) - Preferred.
    *   Or, `REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD` (optional).
*   **Connection Management:**
    *   The client uses `ioredis` default retry strategies, which are robust for handling temporary network issues.
    *   Includes a `connectTimeout` (e.g., 10 seconds) for initial connection attempts.
    *   `maxRetriesPerRequest` is configured for individual commands.
*   **Usage:** Import `getReadyRedisClient`, `setCache`, `getCache` from `lib/redis.ts` for interacting with Redis.
*   **Troubleshooting:**
    *   Persistent `ECONNRESET` errors or connection timeouts usually indicate issues external to the application, such as:
        *   Redis server-side timeouts (e.g., `timeout` config in `redis.conf`).
        *   Network instability or firewalls between the application and Redis server.
        *   Resource limits on the Redis server (memory, connections).
        *   Incorrect `REDIS_URL` or other connection parameters.
    *   Check application logs for `[Redis]` tagged messages and also consult Redis server logs.

---
*Apply these standards contextually. This document defines the expected architecture and structure for this specific project.*
