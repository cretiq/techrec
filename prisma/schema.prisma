// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Developer {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  profileEmail    String?
  name            String
  title           String
  location        String?
  about           String?
  phone           String?
  skills          Skill[]
  experience      Experience[]
  education       Education[]
  projects        Project[]
  assessments     Assessment[]
  applications    Application[]
  savedRoles      SavedRole[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("developers")
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  website     String?
  location    String?
  size        String?
  industry    String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("companies")
}

model Skill {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  level       String    @default("intermediate")
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Experience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  description String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  degree      String?
  institution String
  year        String
  location    String?
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  technologies String[]
  url         String?
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId String @db.ObjectId
}

model Assessment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  status      String
  score       Int?
  completedAt DateTime?
  timeSpent   Int?
  maxTime     Int?
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId String @db.ObjectId
}

model Application {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  role        String
  status      String    @default("pending")
  appliedAt   DateTime  @default(now())
  coverLetter String?
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String   @db.ObjectId
  description String?
  requirements String[]
  location    String?
  salary      String?
  type        String?
  savedBy     SavedRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model SavedRole {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId String @db.ObjectId
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([developerId, roleId])
} 