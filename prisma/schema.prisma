// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Base timestamp fields that other models will use
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEWED
  OFFERED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum RoleType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum AssessmentType {
  TECHNICAL
  BEHAVIORAL
  LANGUAGE
  CODING_CHALLENGE
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

// Gamification enums
// ProfileTier enum removed - using subscription tiers instead

// Subscription tiers
enum SubscriptionTier {
  FREE
  BASIC
  STARTER
  PRO
  EXPERT
}

enum PointsSource {
  SUBSCRIPTION_MONTHLY  // Monthly allocation
  ACHIEVEMENT_BONUS     // Bonus from achievements
  STREAK_BONUS         // Bonus from streaks
  LEVEL_BONUS          // Bonus from level ups
  PROMOTIONAL          // Promotional rewards
  ADMIN_GRANTED        // Admin-granted points
}

enum PointsSpendType {
  JOB_QUERY           // Job search queries
  COVER_LETTER        // Cover letter generation
  OUTREACH_MESSAGE    // Outreach message generation
  CV_SUGGESTION       // AI CV suggestions
  BULK_APPLICATION    // Bulk application features
  PREMIUM_ANALYSIS    // Premium CV analysis
  ADVANCED_SEARCH     // Premium search endpoints (24h, 1h)
}

enum BadgeCategory {
  PROFILE_COMPLETION
  CV_IMPROVEMENT
  CV_ANALYSIS
  APPLICATION_SUCCESS
  SKILL_MASTERY
  ENGAGEMENT
  SPECIAL_EVENT
}

enum BadgeTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum XPSource {
  CV_UPLOADED
  CV_ANALYSIS_COMPLETED
  CV_IMPROVEMENT_APPLIED
  APPLICATION_SUBMITTED
  PROFILE_SECTION_UPDATED
  SKILL_ADDED
  DAILY_LOGIN
  ACHIEVEMENT_UNLOCKED
  CHALLENGE_COMPLETED
  STREAK_MILESTONE
  BADGE_EARNED
  LEVEL_UP
  ADMIN_AWARD
}

enum EmployeeRange {
  LESS_THAN_10
  FROM_10_TO_50
  FROM_50_TO_250
  MORE_THAN_250
}

enum FundingStage {
  BOOTSTRAP
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D_PLUS
  PUBLIC
}

// AnalysisStatus enum - kept for CV model compatibility
enum AnalysisStatus {
  PENDING     // File uploaded, awaiting analysis
  ANALYZING   // Analysis in progress
  COMPLETED   // Analysis finished successfully
  FAILED      // Analysis failed
}

model Developer {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  profileEmail    String?
  name            String
  title           String?
  about           String?
  hashedPassword  String?   // Password hash for email/password authentication
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?

  // Contact Information
  contactInfo     ContactInfo?

  // Gamification fields
  totalXP         Int       @default(0)
  currentLevel    Int       @default(1)
  levelProgress   Float     @default(0.0) // 0.0 to 1.0
  streak          Int       @default(0)
  lastActivityDate DateTime?

  // Subscription fields with constraints
  subscriptionTier     SubscriptionTier @default(FREE)
  subscriptionStatus   String           @default("active") // active, cancelled, expired, past_due
  subscriptionId       String?          // Stripe subscription ID
  customerId           String?          // Stripe customer ID  
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  
  // Points system with constraints
  monthlyPoints        Int              @default(0)   // Points allocated this month
  pointsUsed           Int              @default(0)   // Points spent this month  
  pointsEarned         Int              @default(0)   // Bonus points earned this month
  totalPointsUsed      Int              @default(0)   // Lifetime points usage
  totalPointsEarned    Int              @default(0)   // Lifetime points earned
  pointsResetDate      DateTime?                      // When monthly points reset

  // Relations
  developerSkills DeveloperSkill[]
  experience      Experience[]
  education       Education[]
  achievements    Achievement[]
  projects        Project[]
  assessments     Assessment[]
  applications    Application[]
  savedRoles      SavedRole[]
  customRoles     CustomRole[]

  // Add relation to CVs
  cvs             CV[]


  // Gamification relations
  userBadges      UserBadge[]
  xpTransactions  XPTransaction[]
  dailyChallenges DailyChallenge[]
  gamePreferences GamePreferences?
  pointsTransactions PointsTransaction[]
  
  // Project Portfolio relations
  projectPortfolios ProjectPortfolio[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Gamification indexes
  @@index([totalXP])
  @@index([currentLevel])
  @@index([streak])
  
  // Subscription and points indexes
  @@index([subscriptionTier])
  @@index([subscriptionStatus])
  @@index([pointsResetDate])
  @@index([subscriptionTier, totalXP]) // For tier-specific leaderboards
  @@index([subscriptionTier, currentLevel]) // For tier-specific level rankings
  @@index([subscriptionTier, streak]) // For tier-specific streak rankings
  @@index([pointsResetDate, subscriptionTier]) // For points reset queries
  
  @@map("Developer")
}

model ContactInfo {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?
  linkedin    String?
  github      String?
  website     String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("ContactInfo")
}

model SkillCategory {
  id          String   @id @default(cuid()) @map("_id")
  name        String   @unique
  description String?
  skills      Skill[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("SkillCategory")
}

model Skill {
  id              String    @id @default(cuid()) @map("_id")
  name            String    @unique
  category        SkillCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  description     String?
  
  // Relationships
  developerSkills DeveloperSkill[]
  roleSkills      RoleSkill[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([categoryId])
}

model DeveloperSkill {
  id                String     @id @default(cuid()) @map("_id")
  developerId       String     @db.ObjectId
  skillId          String
  level            SkillLevel
  
  // Relationships
  developer        Developer  @relation(fields: [developerId], references: [id], onDelete: Cascade)
  skill           Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@unique([developerId, skillId])
  @@index([level])
  @@map("DeveloperSkill")
}

model Experience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  description String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  
  // Additional fields
  responsibilities String[]
  achievements    String[]
  teamSize        Int?
  techStack       String[]
  
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([startDate, endDate])
  @@index([developerId])
  @@map("Experience")
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  degree      String?
  institution String
  year        String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  gpa         Float?
  honors      String[]
  activities  String[]
  
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([developerId])
  @@map("Education")
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  technologies String[]
  url         String?
  status      ProjectStatus @default(IN_PROGRESS)
  startDate   DateTime
  endDate     DateTime?
  repository  String?
  liveUrl     String?
  teamSize    Int?
  role        String?
  highlights  String[]
  
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([developerId])
  @@index([status])
  @@map("Project")
}

model Assessment {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        AssessmentType
  status      String
  score       Int?
  completedAt DateTime?
  timeSpent   Int?
  maxTime     Int?
  validUntil  DateTime?
  attempts    Int           @default(1)
  maxAttempts Int           @default(1)
  metadata    Json?
  
  developer   Developer     @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String        @db.ObjectId

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([developerId])
  @@index([type])
  @@map("Assessment")
}

model Company {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  website     String?
  location    String?
  size        EmployeeRange?
  industry    String[]
  logo        String?
  founded     Int?
  employees   EmployeeRange?
  funding     FundingStage?
  verified    Boolean       @default(false)
  
  roles       Role[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([name])
  @@map("Company")
}

model Role {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  companyId     String      @db.ObjectId
  company       Company     @relation(fields: [companyId], references: [id])
  requirements  String[]
  location      String
  salary        String
  type          RoleType
  remote        Boolean     @default(false)
  visaSponsorship Boolean   @default(false)
  
  savedRoles    SavedRole[]
  applications  Application[]
  skills        RoleSkill[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([companyId])
  @@index([type])
  @@map("Role")
}

model RoleSkill {
  id            String     @id @default(cuid()) @map("_id")
  roleId        String     @db.ObjectId
  skillId       String
  requiredLevel SkillLevel
  
  // Relationships
  role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  skill         Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([roleId, skillId])
  @@index([roleId])
  @@index([skillId])
  @@index([requiredLevel])
}

model Application {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  role          Role             @relation(fields: [roleId], references: [id])
  roleId        String           @db.ObjectId
  status        ApplicationStatus @default(PENDING)
  appliedAt     DateTime         @default(now())
  coverLetter   String?
  resumeUrl     String?
  developer     Developer        @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId   String           @db.ObjectId

  // Interview process tracking
  interviews    Interview[]
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([developerId])
  @@index([roleId])
  @@index([status])
  @@map("Application")
}

model Interview {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String    @db.ObjectId
  type          String    // phone, technical, behavioral, final
  scheduledAt   DateTime
  duration      Int       // in minutes
  notes        String?
  feedback     String?
  status       String    // scheduled, completed, cancelled
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([applicationId])
}

model SavedRole {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String    @db.ObjectId
  notes       String?
  
  // NEW APPLICATION TRACKING FIELDS
  appliedFor      Boolean   @default(false) // Track if user applied to this role
  appliedAt       DateTime? // When they marked it as applied
  applicationMethod String? // 'easy_apply', 'external', 'manual', 'cover_letter'
  jobPostingUrl   String?   // Original job posting URL for reference
  applicationNotes String?  // User notes about the application
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([developerId, roleId])
  @@index([developerId])
  @@index([roleId])
  @@index([appliedFor]) // NEW: Index for filtering applied roles
  @@index([appliedAt])  // NEW: Index for date-based queries (heatmap)
  @@map("SavedRole")
}

model CustomRole {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId   String    @db.ObjectId
  developer     Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)

  title         String
  description   String
  requirements  String[]
  skills        String[]
  location      String
  salary        String?
  type          RoleType
  remote        Boolean   @default(false)
  visaSponsorship Boolean @default(false)
  companyName   String?
  url           String?
  originalRoleId String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([developerId, originalRoleId])
  @@index([developerId])
  @@map("CustomRole")
}

model Achievement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  url         String?
  issuer      String?
  
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.ObjectId

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([developerId])
  @@map("Achievement")
}

// Add the new CV model
model CV {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId  String    @db.ObjectId
  developer    Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)

  filename     String    // Unique name/key used in S3 storage (e.g., user-id/uuid.pdf)
  originalName String    // Original filename provided by the user
  mimeType     String    // e.g., 'application/pdf'
  size         Int       // File size in bytes
  s3Key        String    @unique // The key used for the object in S3
  
  // Use AnalysisStatus enum and default to PENDING
  status       AnalysisStatus @default(PENDING)
  uploadDate   DateTime  @default(now())
  extractedText String?   // Store extracted text if needed
  metadata     Json?     // Store any other extracted metadata

  // Improvement score field
  improvementScore Float?       

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([developerId])
  @@index([status])
  // No separate index needed for analysisId, @unique provides one.
  @@map("CVs") // Use plural for collection name
}

// Gamification Models

model GamePreferences {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId       String    @db.ObjectId @unique
  developer         Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  showLevelUp       Boolean   @default(true)
  showAchievements  Boolean   @default(true)
  publicProfile     Boolean   @default(false)
  emailNotifications Boolean  @default(true)
  showComparisons   Boolean   @default(true)
  challengeReminders Boolean  @default(true)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("GamePreferences")
}

model Badge {
  id               String      @id @default(cuid()) @map("_id")
  name             String      @unique
  description      String
  icon             String      // Icon identifier (emoji or icon name)
  category         BadgeCategory
  tier             BadgeTier   @default(BRONZE)
  criteria         Json        // Flexible criteria definition
  xpReward         Int         @default(0)
  isSecret         Boolean     @default(false)
  userBadges       UserBadge[]
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  @@index([category, tier])
  @@map("Badge")
}

model UserBadge {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId String    @db.ObjectId
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  badgeId     String
  badge       Badge     @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt    DateTime  @default(now())
  progress    Float     @default(1.0) // For progressive badges
  
  @@unique([developerId, badgeId])
  @@index([developerId])
  @@index([earnedAt])
  @@map("UserBadge")
}

model XPTransaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId String    @db.ObjectId
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  amount      Int
  source      XPSource
  sourceId    String?   // Reference to CV, application, etc.
  description String
  earnedAt    DateTime  @default(now())
  
  @@index([developerId, earnedAt])
  @@index([source])
  @@map("XPTransaction")
}

model DailyChallenge {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId  String    @db.ObjectId
  developer    Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  title        String
  description  String
  type         String    // 'PROFILE_UPDATE', 'AI_INTERACTION', etc.
  targetValue  Int
  currentProgress Int    @default(0)
  xpReward     Int
  difficulty   String    // 'Easy', 'Medium', 'Hard'
  
  completedAt  DateTime?
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  
  @@index([developerId, expiresAt])
  @@index([completedAt])
  @@map("DailyChallenge")
}

model LeaderboardEntry {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId // Anonymous reference
  category  String    // 'global', 'weekly', 'monthly'
  score     Int
  rank      Int
  period    String    // '2024-01', 'week-3-2024', etc.
  metadata  Json?     // Additional data
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([category, period, rank])
  @@index([userId, category])
  @@map("LeaderboardEntry")
}

model PointsTransaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  developerId String    @db.ObjectId
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  amount      Int       // Positive for earning, negative for spending
  source      PointsSource
  spendType   PointsSpendType?
  sourceId    String?   // Reference to CV, role, application, etc.
  description String
  metadata    Json?     // Additional context data
  
  // Audit fields for fraud detection
  ipAddress   String?   // IP address of the request
  userAgent   String?   // User agent for tracking
  sessionId   String?   // Session identifier
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Performance indexes for points transactions
  @@index([developerId, createdAt])
  @@index([developerId, source])
  @@index([developerId, spendType])
  @@index([source])
  @@index([spendType])
  @@index([createdAt]) // For time-based queries
  @@index([developerId, amount]) // For balance calculations
  
  @@map("PointsTransaction")
}

model ConfigurationSettings {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  key         String    @unique // e.g., 'points-costs-v1', 'xp-rewards-v1'
  version     String    // Version identifier
  config      Json      // The actual configuration data
  isActive    Boolean   @default(true)
  description String?   // Human-readable description
  
  effectiveDate DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([key, isActive])
  @@index([effectiveDate])
  @@map("ConfigurationSettings")
}

// AI-Powered Project Portfolio Enhancement System Models

model ProjectPortfolio {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  developerId     String   @db.ObjectId // No @unique constraint - allows multiple portfolios per developer
  developer       Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  // PROJECT DATA
  title           String
  description     String
  sourceType      String // 'github', 'idea', 'manual'
  sourceId        String // GitHub repo ID, idea ID, or manual identifier
  technologies    String[] // Array of technology strings
  achievements    String[] // Array of achievement strings
  cvDescription   String
  isPublic        Boolean @default(false)
  metadata        Json    @default("{}") // Additional project metadata
  
  // ENHANCEMENT RECORDS
  enhancements    ProjectEnhancement[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([developerId])
  @@index([sourceType])
  @@index([isPublic])
  @@map("ProjectPortfolio")
}

model ProjectEnhancement {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId     String @db.ObjectId
  portfolio       ProjectPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  // ENHANCEMENT DATA
  enhancementType String // 'cv_description', 'technical_summary', 'impact_analysis', 'project_ideas'
  originalContent String
  enhancedContent String
  pointsUsed      Int    @default(0) // Points spent for this enhancement
  confidence      Int    @default(0) // AI confidence score 0-100
  userFeedback    String? // 'helpful', 'somewhat_helpful', 'not_helpful'
  metadata        Json   @default("{}") // Additional enhancement metadata
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([portfolioId])
  @@index([enhancementType])
  @@index([createdAt])
  @@map("ProjectEnhancement")
}
